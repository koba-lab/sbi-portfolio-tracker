generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model portfolio_snapshots {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticker_code       String     @db.VarChar(20)
  name              String
  asset_type        asset_type
  quantity          Decimal    @db.Decimal(15, 4)
  acquisition_price Decimal    @db.Decimal(15, 2)
  current_price     Decimal    @db.Decimal(15, 2)
  market_value      Decimal    @db.Decimal(15, 2)
  profit_loss       Decimal    @db.Decimal(15, 2)
  profit_loss_rate  Decimal?   @db.Decimal(8, 2)
  additional_info   Json?
  snapshot_date     DateTime   @default(dbgenerated("CURRENT_DATE")) @db.Date
  created_at        DateTime   @default(now()) @db.Timestamptz(6)

  @@unique([ticker_code, snapshot_date], map: "idx_snapshots_unique")
  @@index([ticker_code], map: "idx_snapshots_ticker")
  @@index([snapshot_date(sort: Desc)], map: "idx_snapshots_date")
  @@index([asset_type], map: "idx_snapshots_type")
}

model news {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticker_code  String   @db.VarChar(20)
  title        String
  url          String   @unique
  published_at DateTime @db.Timestamptz(6)
  source       String   @db.VarChar(100)
  created_at   DateTime @default(now()) @db.Timestamptz(6)

  @@index([ticker_code], map: "idx_news_ticker")
  @@index([published_at(sort: Desc)], map: "idx_news_published")
  @@index([ticker_code, published_at(sort: Desc)], map: "idx_news_ticker_published")
}

enum asset_type {
  stock
  mutual_fund
  foreign_stock
}
